@using TextShare.Domain.Models.EntityModels.FriendsModels
@model List<FriendshipSatusModel>

@{
    var retrunUrl = Context.Request.Path + Context.Request.QueryString;
}

<ul class="list-group">
    @foreach (var user in Model)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center p-3">
            <div class="d-flex align-items-center gap-3">
                <a href="@Url.Action("DetailsUserByUserName", "User", new { username = user.UserName })"
                class="text-decoration-none text-dark d-flex align-items-center gap-3">
                    @if (!string.IsNullOrEmpty(user.AvatarUri))
                    {
                        <img src="@user.AvatarUri" alt="Avatar" class="rounded-circle"
                        style="width: 50px; height: 50px; object-fit: cover;">
                    }
                    <div>
                        <strong>@user.UserName</strong>
                        <p class="mb-0 text-muted">@user.FirstName @user.LastName</p>
                    </div>
                </a>
            </div>

            <div class="d-flex gap-2">

                @switch (user.FriendStatus)
                {
                        case FriendStatus.Iam:
                                <p>Я</p>
                                break;
                        case FriendStatus.Accepted:
                                <a href="@Url.Action("DeleteFriend", "Friends", new { username = user.UserName, returnUrl = retrunUrl})"
                                   class="btn btn-outline-danger btn-sm2">Удалить</a>
                                break;

                        case FriendStatus.Pending:
                        <a href="@Url.Action("AcceptFriendRequest", "Friends", new { username = user.UserName, returnUrl = retrunUrl })"
                               class="btn btn-outline-success btn-sm2">✅Принять</a>
                        <a href="@Url.Action("DeleteFriend", "Friends", new { username = user.UserName, returnUrl = retrunUrl })"
                               class="btn btn-outline-danger btn-sm2">Удалить</a>
                            break;

                        case FriendStatus.Requested:
                        <a href="@Url.Action("DeleteFriend", "Friends", new { username = user.UserName, returnUrl = retrunUrl })"
                               class="btn btn-outline-warning btn-sm2">Отменить</a>
                            break;

                        case FriendStatus.None:
                        <a href="@Url.Action("SendFriendRequest", "Friends", new { username = user.UserName, returnUrl = retrunUrl })"
                               class="btn btn-outline-primary btn-sm2">➕ Добавить</a>
                            break;

                        default:
                        <a href="@Url.Action("SendFriendRequest", "Friends", new { username = user.UserName, returnUrl = retrunUrl })"
                               class="btn btn-outline-primary btn-sm2"> Добавить</a>
                            break;
               }
            </div>
        </li>
    }
</ul>
